@using Microsoft.AspNetCore.Hosting;
@using SH.Data.ModelVM.Users;
@using AutoMapper
@using SH.Data.Validator

@inject IMapper mapper
@inject IWebHostEnvironment webHostEnvironment

<style>
    .mud-input {
        font-size: var(--mud-typography-body1-size) !important;
        padding-top: 4px !important;
    }

    .mud-input-control.mud-input-control-boolean-input {
        margin-top:3px;
    }

</style>

<MudDialog>
    <DialogContent>
        <MudForm Model="@ProgramUserVm" @ref="@form" Validation="@(Validator.ValidateValue)" ValidationDelay="0"
                 Class="d-flex flex-wrap">

            <div class="col-12 pt-6 pb-6 ">
                <h6 style="font-weight:bold">مشخصات کاربر</h6>

                <div class="d-flex align-items-center pt-5">
                    <MudAvatar Elevation="0" Style="height:150px; width:150px;"
                               Image="@ProgramUserVm.ProfilePicture" />
                    <div class="d-flex flex-column text-center justify-content-center ms-4">
                        <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles2" MaximumFileCount="100">
                            <ButtonTemplate Context="fileContext">
                                <MudButton EndIcon="@Icons.Material.Filled.FileUpload" Class="mb-1" HtmlTag="label" for="@fileContext"
                                           Style="font-size:small" Variant="Variant.Outlined"
                                           Color="Color.Primary">بارگزاری</MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                        <MudText Color="Color.Secondary" Style="font-size:smaller">250px * 250</MudText>
                        <MudText Color="Color.Secondary" Style="font-size:smaller">PNG or JPG File</MudText>
                    </div>

                </div>

            </div>

            <MudTextField @ref=NameTB Label="نام" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Class="col-6 col-lg-4 pa-2" @bind-Value="ProgramUserVm.FirstName" For="@(() => ProgramUserVm.FirstName)" />
            <MudTextField Label="نام خانوادگی" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Class="col-6 col-lg-4 pa-2" @bind-Value="ProgramUserVm.LastName" For="@(() => ProgramUserVm.LastName)" />
            <MudTextField Label="سمت" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Class="col-6 col-lg-4 pa-2" @bind-Value="ProgramUserVm.Position" For="@(() => ProgramUserVm.Position)" />
            <MudTextField Label="شماره تماس" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Class="col-6 col-lg-4 pa-2" @bind-Value="ProgramUserVm.Phone" For="@(() => ProgramUserVm.Phone)" />
            <MudTextField Label="موبایل" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Class="col-6 col-lg-4 pa-2" @bind-Value="ProgramUserVm.Mobile" For="@(() => ProgramUserVm.Mobile)" />
            <MudTextField Label="ایمیل" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Class="col-6 col-lg-4 pa-2" @bind-Value="ProgramUserVm.Email" For="@(() => ProgramUserVm.Email)" />
            <MudTextField Label="نام کاربری دامین" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Class="col-6 col-lg-4 pa-2" @bind-Value="ProgramUserVm.DcUsername" For="@(() => ProgramUserVm.DcUsername)" />
            @* <MudCheckBox Label="کاربر غیر فعال"
            Class="col-6 col-lg-4 pa-2" @bind-Checked="ProgramUserVm.IsEnable" For="@(() => ProgramUserVm.IsEnable)"></MudCheckBox> *@
            <MudSwitch Class="col-6 col-lg-4 pa-2" @bind-Checked="ProgramUserVm.IsEnable" Color="Color.Primary">
                @(ProgramUserVm.IsEnable == true ? "فعال" : "غیر فعال")
            </MudSwitch>
            <div class="col-6 col-lg-4 pa-2 m-0" />

            <MudTextField Label="ادرس" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="3"
                          Class="col-12 pa-2" @bind-Value="ProgramUserVm.Address" For="@(() => ProgramUserVm.Address)" />

        </MudForm>
        <div class="pt-6 pb-4">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async () => await Submit())">قبول</MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="Cancel">رد</MudButton>
        </div>
    </DialogContent>

</MudDialog>

@code {
    [Parameter]
    public ProgramUserVm? ProgramUserVm { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool _success;
    string fileContext;
    string newProfilePicture;
    string oldProfilePicture;
    ProgramUserValidator Validator = new ProgramUserValidator();
    MudForm form;
    MudTextField<string> NameTB;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ProgramUserVm.ProfilePicture == "")
        {
            ProgramUserVm.ProfilePicture = "_content\\SH\\Pictures\\empty-profile-image.jpg";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await NameTB.FocusAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnValidSubmit(EditContext context)
    {
        _success = true;
        StateHasChanged();
    }

    private async Task UploadFiles2(IBrowserFile file)
    {
        try
        {
            if (file != null)
            {
                var filename = Guid.NewGuid().ToString() + Path.GetExtension(file.Name);
                var newfile = await file.RequestImageFileAsync(Path.GetExtension(file.Name), 150, 150);
                var PPath = "C:\\Users\\mehiz\\source\\repos\\mehdizadpanah\\COMCO-Managment\\SH\\wwwroot";
                newProfilePicture = Path.Combine(PPath, "TempPicture", filename);

                if (ProgramUserVm.ProfilePicture != "_content\\SH\\Pictures\\empty-profile-image.jpg")
                {
                    oldProfilePicture = Path.Combine(PPath, "TempPicture", Path.GetFileName(ProgramUserVm.ProfilePicture));

                }
                if (!Directory.Exists(Path.GetDirectoryName(newProfilePicture)))
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(newProfilePicture));
                }
                using (var stream = new FileStream(newProfilePicture, FileMode.Create))
                {
                    await newfile.OpenReadStream().CopyToAsync(stream);
                    stream.Close();
                }
                ProgramUserVm.ProfilePicture = "_content/SH/TempPicture/" + Path.GetFileName(newProfilePicture);
            }
        }
        catch (Exception e)
        {

            throw new Exception(e.Message);
        }

        // files.Add(file);

        //TODO upload the files to the server
    }

    async Task Submit()
    {
        await form.Validate();
        if (!form.IsValid) return;
        if (!string.IsNullOrEmpty(oldProfilePicture))
        {
            if (File.Exists(oldProfilePicture))
            {
                File.Delete(oldProfilePicture);
            }
        }
        MudDialog.Close(DialogResult.Ok(ProgramUserVm));
    }

    void Cancel()
    {
        if (!string.IsNullOrEmpty(newProfilePicture))
        {
            if (File.Exists(newProfilePicture))
            {
                File.Delete(newProfilePicture);
            }

        }
        ProgramUserVm.ProfilePicture = "_content/SH/TempPicture/" + Path.GetFileName(oldProfilePicture);

        MudDialog.Dispose();
        MudDialog.Cancel();

    }


}
