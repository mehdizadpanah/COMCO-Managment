@page "/programusers"
@inject IDialogService DialogService
@inject IMapper mapper
@inject dataFile dataFile


@using SH.Data.ModelVM;
@using SH.Service;
@using SH.Shared
@using System.Runtime.CompilerServices
@using SH.Service.Public
@using System.ComponentModel.Design.Serialization
@using System.Runtime.Loader
@using System.Text.Json
@using System.Text.Json.Serialization
@using AutoMapper
@using Microsoft.AspNetCore.Authentication

<div style="font-family:dana; font-language-override:revert">
    <h3>کاربران برنامه</h3>
    <MudPaper Elevation="10" Class="mt-10 mb-4" Style="background:#E5E4E2">
        <MudToolBar Dense="true">
            <MudIconButton OnClick="@NewDetail" Icon="@Icons.Material.Outlined.Add" Size="Size.Small" />
            <MudIconButton OnClick="@Delete" Icon="@Icons.Material.Outlined.Remove" Size="Size.Small" Disabled="@DeleteButtonDisabled" />
            <MudIconButton OnClick="@OpenDetail" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" Disabled="@EditButtonDisabled" />
        </MudToolBar>
    </MudPaper>
    <MudDataGrid @ref="grid" T="ProgramUserVm" Bordered="false" Class="" Dense="true"
                 Hover="true" Items="@_programUsersModel" ReadOnly="false" T="ProgramUserVm"
                 ColumnResizeMode="ResizeMode.Column" Elevation="10" MultiSelection="true"
                 SelectedItemsChanged="@SelectItemChanged" SelectOnRowClick="false">
        <Columns>
            <SelectColumn />
            <PropertyColumn Property="x => x.FirstName" Title="نام" HeaderStyle="font-weight: bold" />
            <PropertyColumn Property="x => x.LastName" Title="نام خانوادگی" HeaderStyle="font-weight: bold" />
            <PropertyColumn Property="x => x.Email" Title="ایمیل" HeaderStyle="font-weight: bold" />
            <PropertyColumn Property="x => x.Mobile.ToPersianNumber()" Title="موبایل" HeaderStyle="font-weight: bold" />
            <PropertyColumn Property="x => x.Phone.ToPersianNumber()" Title="شماره تماس" HeaderStyle="font-weight: bold" />

        </Columns>

    </MudDataGrid>

</div>
@* <AreYouSure Message="اقدام به حذف کردی. این عملیات قابل برگشت نیست." _isOpen="true" Title="هشدار!!!" YesButton="انجام بده" NoButton="اشتباه کردم"/> *@


@code
{
    private HashSet<ProgramUserVm> SelectedItems { get; set; } = new HashSet<ProgramUserVm>();
    private bool EditButtonDisabled { get; set; } = true;
    private bool DeleteButtonDisabled { get; set; } = true;
    IEnumerable<ProgramUserVm> _programUsersModel = new List<ProgramUserVm>();
    MudDataGrid<ProgramUserVm> grid;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _programUsersModel = dataFile.GetProgramUserVms();
    }

    async Task OpenDetail(MouseEventArgs args)
    {
        await Edit(SelectedItems.FirstOrDefault());
    }

    async Task NewDetail(MouseEventArgs args)
    {
        await Edit(null);
    }

    async Task Edit(ProgramUserVm? item)
    {
        bool New = false;
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = true, CloseButton = true };
        var parameters = new DialogParameters<ProgramUserDetail>();
        //Get record for use if editing canceled by user
        var oldSerializeData = JsonSerializer.Serialize(item);
        //Control if item is new
        if (item == null)
        {
            New = true;
            item = new ProgramUserVm();
        }

        parameters.Add(x => x.ProgramUserVm, item);
        var result = await DialogService.Show<ProgramUserDetail>(null, parameters, options).Result;
        //Edited succesful
        if (!result.Canceled)
        {
            if (New)
            {
                _programUsersModel = _programUsersModel.Concat(new[] { (ProgramUserVm)result.Data });
            }
            dataFile.SaveProgramUserVms(_programUsersModel);
        }
        //Canceled by user
        if (result.Canceled && !New)
        {
            var oldDeserializeData = JsonSerializer.Deserialize<ProgramUserVm>(oldSerializeData);
            _programUsersModel = _programUsersModel.Select(x =>
            {
                if (x.Id == oldDeserializeData.Id)
                {
                    return oldDeserializeData;
                }
                return x;
            }).ToList();

        }
        grid.SelectedItems.Clear();
        SelectItemChanged(SelectedItems);
        StateHasChanged();
    }

    async Task Delete()
    {
        var parameters = new DialogParameters<AreYouSure> { { x => x.Title, "هشدار!!!" } };
        var options = new DialogOptions { NoHeader = true };

        var dialog = await DialogService.ShowAsync<AreYouSure>("",parameters,options);
        var result = await dialog.Result;

        // if (SelectedItems.Any())
        // {
        //     SelectedItems.ToList().ForEach(e =>
        //     {
        //         var temp = _programUsersModel.ToList();
        //         temp.Remove(e);
        //         _programUsersModel = temp;
        //     });
        // }

    }


    void SelectItemChanged(HashSet<ProgramUserVm> items)
    {
        SelectedItems = items;
        if (items.Count() == 1) EditButtonDisabled = false;
        else EditButtonDisabled = true;
        if (items.Count() == 0) DeleteButtonDisabled = true;
        if (items.Count() > 0) DeleteButtonDisabled = false;
    }
}
