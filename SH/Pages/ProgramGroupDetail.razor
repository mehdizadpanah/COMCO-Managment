@using Microsoft.AspNetCore.Hosting;
@using SH.Data.ModelVM.Users;
@using AutoMapper
@using SH.Data.Validator

@inject IMapper mapper
@inject IWebHostEnvironment webHostEnvironment


<style>
    .mud-input {
        font-size: var(--mud-typography-body1-size) !important;
        padding-top: 4px;
    }

</style>



<MudDialog>
    <DialogContent>
        <MudForm Model="@ProgramGroupVm" @ref="@form" Validation="@(Validator.ValidateValue)" ValidationDelay="0"
                 Class="d-flex flex-wrap">
            <div class="col-12 pt-6 pb-6 ">
                <h6 style="font-weight:bold">مشخصات گروه</h6>
            </div>
            <MudTextField @ref=NameTB Label="نام" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Class="col-6 col-lg-4 pa-2" @bind-Value="ProgramGroupVm.GroupName" For="@(() => ProgramGroupVm.GroupName)" />
            <div class="col-6" />
            <MudTextField Label="توضیحات" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Class="col-12 pa-2" @bind-Value="ProgramGroupVm.Description" For="@(() => ProgramGroupVm.Description)" Lines="3" />

        </MudForm>
        <div class="pt-6 pb-4">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async () => await Submit())">قبول</MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="Cancel">رد</MudButton>
        </div>
    </DialogContent>

</MudDialog>

@code {
    [Parameter]
    public ProgramGroupVm? ProgramGroupVm { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool _success;
    ProgramGroupValidator Validator = new ProgramGroupValidator();
    MudForm form;
    MudTextField<string> NameTB;
    string AvatarIcon = "";

    // public ProgramGroupDetail(string avatarIcon)
    // {
    //     if (ProgramGroupVm.GroupName == "") AvatarIcon = "";
    //     else AvatarIcon = ProgramGroupVm.GroupName[0].ToString();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await NameTB.FocusAsync();
        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnValidSubmit(EditContext context)
    {
        _success = true;
        StateHasChanged();
    }

    async Task Submit()
    {
        await form.Validate();
        if (!form.IsValid) return;
        MudDialog.Close(DialogResult.Ok(ProgramGroupVm));
    }

    void Cancel()
    {
        MudDialog.Dispose();
        MudDialog.Cancel();

    }

}
